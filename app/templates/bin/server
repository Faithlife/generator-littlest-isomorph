#!/usr/bin/env node
'use strict';

// Transparently allow require-ing `component.jsx`.
require('node-jsx').install({ extension: '.jsx' });

/*!
 * `bin/server` contains all server-specific code, run immediately only on the
 * server.
 *
 * Our server-specific concerns are:
 * - Serving static and compiled files.
 * - Server-side routing and rendering initial content.
 * - Bad or old links (404, 301, etc.)
 */
var path = require('path');
var express = require('express');
var littlest = require('littlest-isomorph');
var morgan = require('morgan');
var React = require('react');
var config = require('../lib/config');
var context = require('../lib/context');
var router = require('../lib/router');
var app = express();
var renderer = littlest.createRenderer({
  templatePath: path.resolve(__dirname, '..', 'public', 'index.html'),
  router: router,
  React: React,
  context: context
});

app.use(renderer.errorHandler());

// Load-balancer-friendly up check
app.get('/up', function (req, res) {
  res.send(204);
});

// Install a logger that sends formatted messages to STDOUT.
app.use(morgan(config.logger.format));

// File middleware for static files. Should fall through on _all_
// unknown routes.
app.use(express.static('public', {
  index: false,
  redirect: false
}));

// Middleware to isolate a child Context for each request. Immediately after
// this middleware should come any customization to request-based Contexts,
// while global Context changes should occur within this script (presumably)
// not in middleware, since those changes should be done independent of
// requests.
app.use(renderer.childContextHandler());

// If the request URL is valid, this renders the top-level component, the
// Application, based on the current Router configuration. Otherwise, a 404
// is generated.
app.use(renderer.requestHandler());

app.listen(config.port);

console.log('Server %s listening on port %s...', process.pid, config.port);
console.log('Config: %j', config);

// The `disconnect` event is used by `cluster`, the master process, to signal
// a graceful shutdown. Node core will take care of managing the currently-open
// sockets, both open and bound, which should be our only open handles. At
// some point after this, the process should exit gracefully on its own.
process.on('disconnect', function () {
  console.log('Server %s shutting down...', process.pid);
});
